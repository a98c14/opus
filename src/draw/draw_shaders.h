// clang-format off
#pragma once
#include "base.h"

/** basic shader */
read_only global String d_shader_opengl_basic_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"in vec4 v_color;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"color = v_color;\n"
	"}\n"
);

read_only global String d_shader_opengl_basic_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"out vec4 v_color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"v_color = a_color;\n"
	"gl_Position = u_model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** basic_instanced shader */
read_only global String d_shader_opengl_basic_instanced_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"flat in int v_instance_id;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"ShaderData v_data = data[v_instance_id];\n"
	"color = v_data.color;\n"
	"}\n"
);

read_only global String d_shader_opengl_basic_instanced_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"// uniform mat4 u_mvp;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"flat out int v_instance_id;\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * model[gl_InstanceID] * vec4(a_pos, 1.0);\n"
	"v_instance_id = gl_InstanceID;\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** basic_texture shader */
read_only global String d_shader_opengl_basic_texture_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"vec2 uv = v_tex_coord;\n"
	"vec4 tex_color = texture(u_main_texture, uv);\n"
	"color = tex_color;\n"
	"}\n"
);

read_only global String d_shader_opengl_basic_texture_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** basic_trail shader */
read_only global String d_shader_opengl_basic_trail_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"struct TrailVertexData\n"
	"{\n"
	"vec4 pos;\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 6) buffer Trail\n"
	"{\n"
	"TrailVertexData vertices[];\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec4 v_color;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"color = v_color;\n"
	"}\n"
);

read_only global String d_shader_opengl_basic_trail_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct TrailVertexData\n"
	"{\n"
	"vec4 pos;\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 6) buffer Trail\n"
	"{\n"
	"TrailVertexData vertices[];\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec4 v_color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"mat4 model = projection * view * u_model;\n"
	"v_color = vertices[gl_VertexID].color;\n"
	"gl_Position = model * vertices[gl_VertexID].pos;\n"
	"}\n"
);

/** boid_instanced shader */
read_only global String d_shader_opengl_boid_instanced_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"flat in int v_instance_id;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"float sd_triangle_isosceles(in vec2 p, in vec2 q)\n"
	"{\n"
	"p.x = abs(p.x);\n"
	"vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n"
	"vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n"
	"float s = -sign( q.y );\n"
	"vec2 d = min(vec2(dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n"
	"vec2(dot(b,b), s*(p.y-q.y)));\n"
	"return -sqrt(d.x)*sign(d.y);\n"
	"}\n"
	"\n"
	"void main() {\n"
	"float smoothness = 5;\n"
	"vec2 dxy = fwidth(v_tex_coord);\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2.0 - 1.0;\n"
	"uv = uv + vec2(0.0, 0.8);\n"
	"float d = sd_triangle_isosceles(uv, vec2(0.8, 1.6));\n"
	"d = smoothstep(0.0, dxy.x * smoothness, d);\n"
	"d = 1 - d;\n"
	"color = vec4(data[v_instance_id].color.xyz, d * data[v_instance_id].color.a);\n"
	"}\n"
);

read_only global String d_shader_opengl_boid_instanced_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"// uniform mat4 u_mvp;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"flat out int v_instance_id;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * model[gl_InstanceID] * vec4(a_pos, 1.0);\n"
	"v_instance_id = gl_InstanceID;\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** circle shader */
read_only global String d_shader_opengl_circle_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"float u_fill_ratio;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"float softness = 3;\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2.0 - 1.0;\n"
	"\n"
	"vec2 dp = fwidth(uv);\n"
	"softness *= dp.x;\n"
	"float d = smoothstep((1 - u_fill_ratio) - softness * 2, (1 - u_fill_ratio) - softness, length(uv)) - smoothstep(1 - softness, 1.0, length(uv));\n"
	"color = vec4(u_color.xyz, d * u_color.a);\n"
	"}\n"
);

read_only global String d_shader_opengl_circle_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"float u_fill_ratio;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** circle_instanced shader */
read_only global String d_shader_opengl_circle_instanced_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 color;\n"
	"float fill_ratio;\n"
	"float slice;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"flat in int v_instance_id;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"ShaderData v_data = data[v_instance_id];\n"
	"float softness = 3;\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2.0 - 1.0;\n"
	"\n"
	"// partial circle\n"
	"// TODO: maybe use different shader for this? might be\n"
	"// to costly for circles that don't use this feature.\n"
	"float angle = acos(dot(normalize(uv), vec2(1, 0))) / 3.1415926;\n"
	"float enabled = 1 - step(v_data.slice, angle);\n"
	"\n"
	"vec2 dp = fwidth(uv);\n"
	"softness *= dp.x;\n"
	"float d = smoothstep((1 - v_data.fill_ratio) - softness * 2, (1 - v_data.fill_ratio) - softness, length(uv)) - smoothstep(1 - softness, 1.0, length(uv));\n"
	"color = vec4(v_data.color.xyz, d * v_data.color.a) * enabled;\n"
	"}\n"
);

read_only global String d_shader_opengl_circle_instanced_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 color;\n"
	"float fill_ratio;\n"
	"float slice;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"// uniform mat4 u_mvp;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"flat out int v_instance_id;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * model[gl_InstanceID] * vec4(a_pos, 1.0);\n"
	"v_instance_id = gl_InstanceID;\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** freetype_text shader */
read_only global String d_shader_opengl_freetype_text_frag = string_comp(
	"#version 430 core\n"
	"#define DEBUG 0\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 glyph_bounds;\n"
	"vec4 color;\n"
	"vec4 outline_color;\n"
	"/** Softness of the glyph edges. Recommended value: 30 */\n"
	"float softness;\n"
	"/** Thickness of the glyph. Recommended value: 0.5, Values outside of the range 0.4 and 0.9 are not really usable */\n"
	"float thickness;\n"
	"/** Outline thickness. Should be between 0 and 0.5 */\n"
	"float outline_thickness;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"flat in int v_instance_id;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"ShaderData v_data = data[v_instance_id];\n"
	"vec2 uv = v_tex_coord;\n"
	"float d = texture(u_main_texture, v_tex_coord).r;\n"
	"// float aaf = fwidth(d);\n"
	"// float alpha = smoothstep(0.5 - aaf, 0.5 + aaf, d);\n"
	"\n"
	"color = vec4(v_data.color.rgb, d);\n"
	"#if DEBUG == 1\n"
	"color = mix(vec4(1, 0, 0, 1), color, color.a);\n"
	"#endif\n"
	"}\n"
);

read_only global String d_shader_opengl_freetype_text_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 glyph_bounds;\n"
	"vec4 color;\n"
	"vec4 outline_color;\n"
	"/** Softness of the glyph edges. Recommended value: 30 */\n"
	"float softness;\n"
	"/** Thickness of the glyph. Recommended value: 0.5, Values outside of the range 0.4 and 0.9 are not really usable */\n"
	"float thickness;\n"
	"/** Outline thickness. Should be between 0 and 0.5 */\n"
	"float outline_thickness;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"flat out int v_instance_id;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * model[gl_InstanceID] * vec4(a_pos, 1.0);\n"
	"ShaderData v_data = data[gl_InstanceID];\n"
	"float w = v_data.glyph_bounds.z - v_data.glyph_bounds.x;\n"
	"float h = v_data.glyph_bounds.w - v_data.glyph_bounds.y;\n"
	"float x = ((a_tex_coord.x * w) + v_data.glyph_bounds.x) / texture_size.x;\n"
	"float y = (((1 - a_tex_coord.y) * h) + v_data.glyph_bounds.y) / texture_size.y;\n"
	"v_instance_id = gl_InstanceID;\n"
	"v_tex_coord = vec2(x, y);\n"
	"}\n"
);

/** freetype_text_sdf shader */
read_only global String d_shader_opengl_freetype_text_sdf_frag = string_comp(
	"#version 430 core\n"
	"#define DEBUG 0\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 glyph_bounds;\n"
	"vec4 color;\n"
	"vec4 outline_color;\n"
	"/** Softness of the glyph edges. Recommended value: 30 */\n"
	"float softness;\n"
	"/** Thickness of the glyph. Recommended value: 0.5, Values outside of the range 0.4 and 0.9 are not really usable */\n"
	"float thickness;\n"
	"/** Outline thickness. Should be between 0 and 0.5 */\n"
	"float outline_thickness;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"flat in int v_instance_id;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"ShaderData v_data = data[v_instance_id];\n"
	"vec2 uv = v_tex_coord;\n"
	"float d = texture(u_main_texture, v_tex_coord).r;\n"
	"float aaf = fwidth(d);\n"
	"d = smoothstep(0.5 - aaf, 0.5 + aaf, d);\n"
	"\n"
	"color = vec4(v_data.color.rgb, d);\n"
	"#if DEBUG == 1\n"
	"color = mix(vec4(1, 0, 0, 1), color, color.a);\n"
	"#endif\n"
	"}\n"
);

read_only global String d_shader_opengl_freetype_text_sdf_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 glyph_bounds;\n"
	"vec4 color;\n"
	"vec4 outline_color;\n"
	"/** Softness of the glyph edges. Recommended value: 30 */\n"
	"float softness;\n"
	"/** Thickness of the glyph. Recommended value: 0.5, Values outside of the range 0.4 and 0.9 are not really usable */\n"
	"float thickness;\n"
	"/** Outline thickness. Should be between 0 and 0.5 */\n"
	"float outline_thickness;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"flat out int v_instance_id;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * model[gl_InstanceID] * vec4(a_pos, 1.0);\n"
	"ShaderData v_data = data[gl_InstanceID];\n"
	"float w = v_data.glyph_bounds.z - v_data.glyph_bounds.x;\n"
	"float h = v_data.glyph_bounds.w - v_data.glyph_bounds.y;\n"
	"float x = ((a_tex_coord.x * w) + v_data.glyph_bounds.x) / texture_size.x;\n"
	"float y = (((1 - a_tex_coord.y) * h) + v_data.glyph_bounds.y) / texture_size.y;\n"
	"v_instance_id = gl_InstanceID;\n"
	"v_tex_coord = vec2(x, y);\n"
	"}\n"
);

/** line shader */
read_only global String d_shader_opengl_line_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"float softness = 2;\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2.0 - 1.0;\n"
	"uv = abs(uv);\n"
	"vec2 p = fwidth(uv);\n"
	"float a_x = 1 - smoothstep(1.0 - softness * p.x, 1.0, uv.x);\n"
	"float a_y = 1 - smoothstep(1.0 - softness * p.y, 1.0, uv.y);\n"
	"float a = min(a_x, a_y) * max(a_x, a_y);\n"
	"color = vec4(u_color.xyz, a * u_color.a);\n"
	"}\n"
);

read_only global String d_shader_opengl_line_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** rect_rounded shader */
read_only global String d_shader_opengl_rect_rounded_frag = string_comp(
	"#version 430 core\n"
	"#define DEBUG 0\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"vec4 u_edge_color;\n"
	"vec4 u_round;\n"
	"vec2 u_scale;\n"
	"float u_softness;\n"
	"float u_edge_thickness;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"float sd_rounded_box(in vec2 p, in vec2 b, in vec4 r)\n"
	"{\n"
	"r.xy = (p.x>0.0)?r.xy : r.zw;\n"
	"r.x  = (p.y>0.0)?r.x  : r.y;\n"
	"vec2 q = abs(p)-b+r.x;\n"
	"return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n"
	"}\n"
	"\n"
	"void main() {\n"
	"vec2 uv = v_tex_coord * 2 - 1;\n"
	"float aspect = u_scale.x / u_scale.y;\n"
	"uv.x *= aspect;\n"
	"vec2 dxy = fwidth(uv);\n"
	"vec2 softness = u_softness * dxy;\n"
	"float edge_thickness = u_edge_thickness * dxy.x;\n"
	"\n"
	"// calculate corner roundness\n"
	"vec4 r = u_round;\n"
	"r.xy = (uv.x>0.0) ? r.xy : r.zw;\n"
	"r.x  = (uv.y>0.0) ? r.x  : r.y;\n"
	"r.x *= dxy.x;\n"
	"\n"
	"vec2 q = abs(uv) - (vec2(1 * aspect, 1) - softness) + r.x;\n"
	"float d = min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n"
	"float edge = step(softness.x - edge_thickness, d);\n"
	"d = 1 - smoothstep(0.0, softness.x, d);\n"
	"\n"
	"color = mix(u_color, u_edge_color, edge);\n"
	"color = vec4(color.xyz, color.a * d);\n"
	"#if DEBUG == 1\n"
	"color = mix(vec4(0.0, 0.0, 1.0, 1.0), color, color.a);\n"
	"#endif\n"
	"}\n"
);

read_only global String d_shader_opengl_rect_rounded_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"vec4 u_edge_color;\n"
	"vec4 u_round;\n"
	"vec2 u_scale;\n"
	"float u_softness;\n"
	"float u_edge_thickness;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

/** sprite shader */
read_only global String d_shader_opengl_sprite_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"int u_sprite_index;\n"
	"int u_texture_layer_index;\n"
	"float u_alpha;\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"layout(std140, binding = 5) buffer SpriteBoundBuffer\n"
	"{\n"
	"vec4 sprite_bounds[];\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2DArray u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec4 v_bounds;\n"
	"in vec2 v_tex_coord;\n"
	"in float v_tex_layer;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"vec2 calculate_uv(vec2 uv, vec2 tex_size)\n"
	"{\n"
	"vec2 pixels = uv * tex_size;\n"
	"vec2 alpha = 0.7 * fwidth(pixels);\n"
	"vec2 pixels_fract = fract(pixels);\n"
	"vec2 pixels_diff = clamp( .5 / alpha * pixels_fract, 0.0, .5 ) + clamp( .5 / alpha * (pixels_fract - 1) + .5, 0.0, .5 );\n"
	"pixels = floor(pixels) + pixels_diff;\n"
	"\n"
	"return pixels / tex_size;\n"
	"}\n"
	"\n"
	"void main() {\n"
	"vec2 uv = calculate_uv(v_tex_coord, texture_size);\n"
	"vec4 texture_color = texture(u_main_texture, vec3(uv, v_tex_layer));\n"
	"color = vec4(mix(texture_color.rgb, u_color.rgb, u_color.a), texture_color.a * u_alpha);\n"
	"\n"
	"// TODO(selim): we should sort the sprites and remove this\n"
	"if (texture_color.a < 0.01) discard;\n"
	"}\n"
);

read_only global String d_shader_opengl_sprite_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"int u_sprite_index;\n"
	"int u_texture_layer_index;\n"
	"float u_alpha;\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"layout(std140, binding = 5) buffer SpriteBoundBuffer\n"
	"{\n"
	"vec4 sprite_bounds[];\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2DArray u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec4 v_bounds;\n"
	"out vec2 v_tex_coord;\n"
	"out float v_tex_layer;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_bounds = sprite_bounds[u_sprite_index];\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"\n"
	"float x = ((a_tex_coord.x * v_bounds.z) + v_bounds.x) / texture_size.x;\n"
	"float y = 1 - (((1 - a_tex_coord.y) * v_bounds.w) + v_bounds.y) / texture_size.y;\n"
	"v_tex_coord = vec2(x, y);\n"
	"v_tex_layer = 0;\n"
	"v_tex_layer = max(0.0, min(texture_layer_count - 1.0, floor(u_texture_layer_index + 0.5)));\n"
	"}\n"
);

/** sprite_border shader */
read_only global String d_shader_opengl_sprite_border_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"int u_sprite_index;\n"
	"int u_texture_layer_index;\n"
	"vec2 u_size;\n"
	"vec4 u_color;\n"
	"int u_protection;\n"
	"};\n"
	"\n"
	"layout(std140, binding = 5) buffer SpriteBoundBuffer\n"
	"{\n"
	"vec4 sprite_bounds[];\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2DArray u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec4 v_bounds;\n"
	"in vec2 v_screen_coord;\n"
	"in float v_tex_layer;\n"
	"in vec2 v_protection;\n"
	"in vec2 v_texel;\n"
	"in vec4 v_edges;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"vec2 calculate_uv(vec2 uv, vec2 tex_size)\n"
	"{\n"
	"vec2 pixels = uv * tex_size;\n"
	"vec2 alpha = 0.7 * fwidth(pixels);\n"
	"vec2 pixels_fract = fract(pixels);\n"
	"vec2 pixels_diff = clamp( .5 / alpha * pixels_fract, 0.0, .5 ) + clamp( .5 / alpha * (pixels_fract - 1) + .5, 0.0, .5 );\n"
	"pixels = floor(pixels) + pixels_diff;\n"
	"\n"
	"return pixels / tex_size;\n"
	"}\n"
	"\n"
	"void main() {\n"
	"vec2 uv;\n"
	"vec2 screen_uv = v_screen_coord;\n"
	"\n"
	"if(screen_uv.x > v_edges.z)\n"
	"uv.x = v_bounds.z - v_protection.x + (screen_uv.x - v_edges.z) * v_texel.x;\n"
	"else if(screen_uv.x < v_edges.x)\n"
	"uv.x = v_bounds.x + screen_uv.x * v_texel.x;\n"
	"else\n"
	"uv.x = v_bounds.z - v_protection.x;\n"
	"\n"
	"if(screen_uv.y < v_edges.y)\n"
	"uv.y = v_bounds.y - screen_uv.y * v_texel.y;\n"
	"else if(screen_uv.y > v_edges.w)\n"
	"uv.y = v_bounds.w + v_protection.y + -(screen_uv.y - v_edges.w) * v_texel.y;\n"
	"else\n"
	"uv.y = v_bounds.w + v_protection.y;\n"
	"\n"
	"uv.y = 1 - uv.y;\n"
	"vec4 texture_color = texture(u_main_texture, vec3(uv, v_tex_layer));\n"
	"color = texture_color;\n"
	"}\n"
);

read_only global String d_shader_opengl_sprite_border_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"int u_sprite_index;\n"
	"int u_texture_layer_index;\n"
	"vec2 u_size;\n"
	"vec4 u_color;\n"
	"int u_protection;\n"
	"};\n"
	"\n"
	"layout(std140, binding = 5) buffer SpriteBoundBuffer\n"
	"{\n"
	"vec4 sprite_bounds[];\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2DArray u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec4 v_bounds;\n"
	"out vec2 v_screen_coord;\n"
	"out vec2 v_protection;\n"
	"out float v_tex_layer;\n"
	"out vec2 v_texel;\n"
	"out vec4 v_edges;\n"
	"\n"
	"void main()\n"
	"{\n"
	"vec4 bounds = sprite_bounds[u_sprite_index];\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"\n"
	"v_protection = vec2(u_protection.x / texture_size.x, u_protection / texture_size.y);\n"
	"v_bounds = vec4(bounds.x / texture_size.x, (bounds.y + bounds.w) / texture_size.y, (bounds.x + bounds.z) / texture_size.x, bounds.y / texture_size.y);\n"
	"v_screen_coord = a_tex_coord;\n"
	"v_tex_layer = 0;\n"
	"v_tex_layer = max(0.0, min(texture_layer_count - 1.0, floor(u_texture_layer_index + 0.5)));\n"
	"v_texel = vec2(u_size.x / texture_size.x, u_size.y / texture_size.y);\n"
	"\n"
	"float dx = 1. / u_size.x;\n"
	"float dy = 1. / u_size.y;\n"
	"\n"
	"v_edges.x = u_protection * dx;\n"
	"v_edges.z = 1 - u_protection * dx;\n"
	"v_edges.y = u_protection * dy;\n"
	"v_edges.w = 1 - u_protection * dy;\n"
	"}\n"
);

/** test shader */
read_only global String d_shader_opengl_test_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"vec2 uv = v_tex_coord;\n"
	"vec4 texture_color = texture(u_main_texture, uv);\n"
	"color = vec4(texture_color);\n"
	"}\n"
);

read_only global String d_shader_opengl_test_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"gl_Position = u_model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** test_glyph shader */
read_only global String d_shader_opengl_test_glyph_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"vec2 uv = v_tex_coord;\n"
	"float d = texture(u_main_texture, v_tex_coord).r;\n"
	"\n"
	"float aaf = fwidth(d);\n"
	"float alpha = smoothstep(0.5 - aaf, 0.5 + aaf, d);\n"
	"\n"
	"color = vec4(1, 1, 1, d);\n"
	"#if DEBUG == 1\n"
	"color = mix(vec4(1, 0, 0, 1), color, color.a);\n"
	"#endif\n"
	"}\n"
);

read_only global String d_shader_opengl_test_glyph_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"uniform float u_softness;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"gl_Position = u_model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** text shader */
read_only global String d_shader_opengl_text_frag = string_comp(
	"#version 430 core\n"
	"#define DEBUG 0\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 glyph_bounds;\n"
	"vec4 color;\n"
	"vec4 outline_color;\n"
	"/** Softness of the glyph edges. Recommended value: 30 */\n"
	"float softness;\n"
	"/** Thickness of the glyph. Recommended value: 0.5, Values outside of the range 0.4 and 0.9 are not really usable */\n"
	"float thickness;\n"
	"/** Outline thickness. Should be between 0 and 0.5 */\n"
	"float outline_thickness;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"flat in int v_instance_id;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"ShaderData v_data = data[v_instance_id];\n"
	"vec2 uv = v_tex_coord;\n"
	"vec2 dxy = fwidth(uv);\n"
	"float d = texture(u_main_texture, uv).r;\n"
	"float softness = v_data.softness * max(dxy.x, dxy.y);\n"
	"float alpha = smoothstep(1 - v_data.thickness - softness, 1 - v_data.thickness + softness, d);\n"
	"float outline_alpha = smoothstep(1 - v_data.thickness - softness - v_data.outline_thickness, 1 - v_data.thickness + softness - v_data.outline_thickness, d);\n"
	"vec4 outline_color = vec4(v_data.outline_color.xyz, outline_alpha * v_data.outline_color.a);\n"
	"vec4 inside_color = vec4(v_data.color.xyz, alpha * v_data.color.a);\n"
	"color = mix(inside_color, outline_color, clamp(outline_color.a - alpha, 0, 1));\n"
	"#if DEBUG == 1\n"
	"color = mix(vec4(1, 0, 0, 1), color, color.a);\n"
	"#endif\n"
	"}\n"
);

read_only global String d_shader_opengl_text_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"vec4 glyph_bounds;\n"
	"vec4 color;\n"
	"vec4 outline_color;\n"
	"/** Softness of the glyph edges. Recommended value: 30 */\n"
	"float softness;\n"
	"/** Thickness of the glyph. Recommended value: 0.5, Values outside of the range 0.4 and 0.9 are not really usable */\n"
	"float thickness;\n"
	"/** Outline thickness. Should be between 0 and 0.5 */\n"
	"float outline_thickness;\n"
	"};\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 3) buffer Matrices\n"
	"{\n"
	"mat4 model[];\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"flat out int v_instance_id;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * model[gl_InstanceID] * vec4(a_pos, 1.0);\n"
	"ShaderData v_data = data[gl_InstanceID];\n"
	"float w = v_data.glyph_bounds.z - v_data.glyph_bounds.x;\n"
	"float h = v_data.glyph_bounds.w - v_data.glyph_bounds.y;\n"
	"float x = ((a_tex_coord.x * w) + v_data.glyph_bounds.x) / texture_size.x;\n"
	"float y = ((a_tex_coord.y * h) + v_data.glyph_bounds.y) / texture_size.y;\n"
	"v_instance_id = gl_InstanceID;\n"
	"v_tex_coord = vec2(x, y);\n"
	"}\n"
);

/** triangle shader */
read_only global String d_shader_opengl_triangle_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"float sdEquilateralTriangle(in vec2 p, in float r)\n"
	"{\n"
	"const float k = sqrt(3.0);\n"
	"p.x = abs(p.x) - r;\n"
	"p.y = p.y + r/k;\n"
	"if(p.x+k*p.y>0.0) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n"
	"p.x -= clamp(p.x,-2.0*r, 0.0 );\n"
	"return -length(p)*sign(p.y);\n"
	"}\n"
	"\n"
	"void main() {\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2 - 1;\n"
	"uv.y += 0.15;\n"
	"float d = sdEquilateralTriangle(uv, 1.0f);\n"
	"vec3 col = vec3(1.0-smoothstep(0.0,0.02,abs(d)));\n"
	"\n"
	"color = vec4(col, 1.0f);\n"
	"}\n"
);

read_only global String d_shader_opengl_triangle_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec3 a_pos;\n"
	"layout(location = 1) in vec3 a_color;\n"
	"layout(location = 2) in vec2 a_tex_coord;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) uniform Camera\n"
	"{\n"
	"mat4 projection;\n"
	"mat4 view;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 4) uniform Custom\n"
	"{\n"
	"vec4 u_color;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
	"v_tex_coord = a_tex_coord;\n"
	"}\n"
);

