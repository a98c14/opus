"""
Examples:
python .\opus\tools\generate_prefab_header.py --data "$HOME\source\github\enginefire\docs\prefabs.txt" --component-data "$HOME\source\github\enginefire\docs\component_template.txt" --out "$HOME\source\github\enginefire\src\generated" --out-schema "c:\.ignore\prefab_schema.json"
"""
import os
import json
import argparse
import re

def log_info(message):
    print(f"[info] {message}")

def camel_to_snake(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def snake_to_pascal(name):
    words = name.split('_')
    return ''.join(word.capitalize() for word in words)
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Opus Prefab Header Generator")
    parser.add_argument("--data", type=str, help="Prefab data file", required=True)
    parser.add_argument("--component-data", type=str, help="Component data file", required=True)
    parser.add_argument("--out", type=str, help="Output folder path", required=True)
    parser.add_argument("--out-schema", type=str, help="JSON Schema output path")
    args = parser.parse_args()
    
    out_header = os.path.join(args.out, 'entity_types.h')
    if os.path.exists(out_header):
        os.remove(out_header)
        
    out_source = os.path.join(args.out, 'entity_types.c')
    if os.path.exists(out_source):
        os.remove(out_source)

    lines = []
    with  open(args.component_data, 'r') as component_file:
        lines = component_file.readlines()
        
    with  open(args.data, 'r') as prefab_file:
        lines += prefab_file.readlines()

    definitions = {}
    current_struct = None
    mode = None
    
    # read definitions from file
    for line in lines:
        match = re.match(r"^#\s*(?P<mode_name>\w+)\s+$", line)
        if match is not None:
            mode = match.groups()[0]
        
        # check for struct start
        match = re.match(r"\[(?P<struct_name>\w+)\]( : (?P<component_code_name>\w+))?", line)
        if match is not None and current_struct is not None:
            definitions[current_struct['name']] = current_struct
            
        if match is not None:
            groups = match.groups()
            current_struct = {}
            current_struct['name'] = groups[0]
            current_struct['type'] = mode
            current_struct['fields'] = []
            if len(groups) > 1:
                current_struct['component_name'] = groups[2]

        field_match = re.match(r"\s+\((?P<field_name>\w+)( : (?P<field_type>[\w\d]+))?\)\s*$", line)
        field_info = {}
        if field_match is not None:
            field_info['name'] = field_match.groups()[0]
            if len(field_match.groups()) > 1:
                field_info['type'] = field_match.groups()[2]
                
            current_struct['fields'].append(field_info)
            

    if current_struct is not None:
        definitions[current_struct['name']] = current_struct

    # find type names automatically
    for definition in definitions:
        for field in definitions[definition]['fields']:
            if 'type' not in field or field['type'] is None:
                field['type'] = definitions[field['name']]['type']
            if field['type'] == 'component' or field['type'] == 'tag_component':
                field['pretty_name'] = field['name']
                field['name'] = definitions[field['name']]['component_name']
            
    prefabs = list(filter(lambda x: x['type'] == 'prefab', definitions.values()))        
    groups = list(filter(lambda x: x['type'] == 'group', definitions.values()))
    
    # TODO(selim): validate data file, check if given components/groups exist in the file
    
    if os.path.exists(out_header):
        os.remove(out_header)

    with open(out_header, 'w') as header_file:
        header_file.writelines(["/**\n", " * IMPORTANT:\n", " * THIS FILE IS AUTO GENERATED\n", " * DO NOT EDIT THIS FILE BY HAND\n", "*/\n"])
        header_file.write("#pragma once\n\n")
        header_file.write("#include <core/defines.h>\n")
        header_file.write("#include <ecs/component.h>\n\n")
        header_file.write("#include \"component_types.h\"\n\n")
        
        header_file.write("typedef struct\n")
        header_file.write("{\n")
        header_file.write("\t/** groups */\n")
        for group in groups:
            header_file.write(f"\tComponentTypeField {group['name']};\n")
        
        header_file.write("\n\t/** prefabs */\n")
        for prefab in prefabs:
            header_file.write(f"\tComponentTypeField {prefab['name']};\n")
        header_file.write("} ComponentTypeStorage;\n\n")
        header_file.write("internal ComponentTypeStorage* entity_types_init(Arena* arena);")
    print(f"[info] generated header successfully at {out_header}")    
    
    with open(out_source, 'w') as source_file:
        source_file.writelines(["/**\n", " * IMPORTANT:\n", " * THIS FILE IS AUTO GENERATED\n", " * DO NOT EDIT THIS FILE BY HAND\n", "*/\n"])
        source_file.write(f"#include \"{os.path.basename(out_header)}\"\n\n")
        
        source_file.write("internal ComponentTypeStorage*\n")
        source_file.write("entity_types_init(Arena* arena)\n")
        source_file.write("{\n")
        source_file.write("\tComponentTypeStorage* storage = arena_push_struct_zero(arena, ComponentTypeStorage);\n")
        
        source_file.write("\n\t/** groups */\n")
        for group in groups:
            for field in group['fields']:
                if field['type'] == 'component':
                    source_file.write(f"\tcomponent_type_field_set(&storage->{group['name']}, CT_{field['name']});\n")
                elif field['type'] == 'tag_component':
                    source_file.write(f"\tcomponent_type_field_set(&storage->{group['name']}, CTT_{field['name']});\n")
                else:
                    source_file.write(f"\tcomponent_type_field_set_group(&storage->{group['name']}, storage->{field['name']});\n")
            source_file.write(f"\n")
                    
        source_file.write("\t/** prefabs */\n")
        for prefab in prefabs:
            for field in prefab['fields']:
                if field['type'] == 'component':
                    source_file.write(f"\tcomponent_type_field_set(&storage->{prefab['name']}, CT_{field['name']});\n")
                elif field['type'] == 'tag_component':
                    source_file.write(f"\tcomponent_type_field_set(&storage->{prefab['name']}, CTT_{field['name']});\n")
                else:
                    source_file.write(f"\tcomponent_type_field_set_group(&storage->{prefab['name']}, storage->{field['name']});\n")
            source_file.write(f"\n")
        source_file.write("\treturn storage;\n")
        source_file.write("}")
        
        
    
    default_type_def = { "type": "string" }
    core_type_defs = {}
    core_type_defs['float32'] = { "type": "number" }
    core_type_defs['AnimationIndex'] = { "type": "string" }
    core_type_defs['Vec2'] = { "type": "array", "minItems": 2, "maxItems": 2 }
    core_type_defs['Vec3'] = { "type": "array", "minItems": 3, "maxItems": 3 }    

    if args.out_schema is not None:
        schema = {}
        schema['$schema'] = "http://json-schema.org/draft-07/schema#"
        schema['type'] = "object"
        schema['definitions'] = {}
        schema['properties'] = {}
        
        for definition in definitions.values():
            if definition['type'] == 'component':
                component_type_definition = {}
                component_type_definition['type'] = "object"
                component_type_definition['properties'] = {}
                for field in definition['fields']:
                    component_type_definition['properties'][field['name']] = core_type_defs[field['type']] if field['type'] in core_type_defs else default_type_def
                schema['definitions'][definition['name']] = component_type_definition
            elif definition['type'] == 'prefab':
                prefab_properties = {}
                prefab_properties['type'] = "object"
                prefab_properties['properties'] = {}
                prefab_components = []
                processing_queue = definition['fields'].copy()
                while len(processing_queue) > 0:
                    field = processing_queue.pop()
                    if(field['type'] == 'component'):
                        prefab_components.append(field['pretty_name']) # sorry
                    if(field['type'] == 'group'):
                        processing_queue.extend(definitions[field['name']]['fields'])
                
                prefab_components = list(set(prefab_components))
                for component in prefab_components:        
                    prefab_properties['properties'][component] = { "$ref": f"#/definitions/{component}"}
                    
                schema['properties'][definition['name']] = prefab_properties
        
        with open(args.out_schema, 'w') as schema_file:
            json.dump(schema, schema_file, indent=4)
            
        
    
    print(f"[info] generated source successfully at {out_source}")    

    

