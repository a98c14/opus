"""
Examples:
python .\generate_font_header.py --name open_sans --data "$HOME\source\practice\opengl\opengl_14_win\assets\open_sans.json" --out=".\test_out.c"
"""
import json
import os
import argparse

def log_info(message):
    print(f"[info] {message}")

def parse_sprite_name(filename):
    # 'basic/base_robot_4.png' -> 'BASE_ROBOT_4'
    return filename.split('/')[-1].split('.')[0].upper()

def parse_animation_name(filename):
    # 'basic/base_robot_4.png' -> 'BASE_ROBOT'
    return "_".join(parse_sprite_name(filename).split('_')[:-1]).upper()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Opus Font Header Generator")
    parser.add_argument("--name", type=str, help="Name of the font file", required=True)
    parser.add_argument("--data", type=str, help="List of texture packer output data files", required=True)
    parser.add_argument("--out", type=str, help="Output path", required=True)
    args = parser.parse_args()

    if os.path.exists(args.out):
        os.remove(args.out)
        
    glyphs = []
    with open(args.data, 'r') as data_file, open(args.out, 'w') as output_file:
        data = json.load(data_file)
        # write header
        output_file.writelines(["/**\n", " * IMPORTANT:\n", " * THIS FILE IS AUTO GENERATED\n", " * DO NOT EDIT THIS FILE BY HAND\n", "*/\n"])
        output_file.write("#pragma once\n\n")
        output_file.write("#include <core/defines.h>\n")
        output_file.write("#include <core/math.h>\n")
        output_file.write("#include <engine/text.h>\n")
        
        output_file.write("\nglobal const GlyphAtlasInfo FONT_OPEN_SANS_ATLAS_INFO =\n{\n")
        output_file.write(f"\t.width = {data['atlas']['width']}\n")
        output_file.write(f"\t.height = {data['atlas']['height']}\n")
        output_file.write(f"\t.size = {data['atlas']['size']}\n")
        output_file.write(f"\t.distance_range = {data['atlas']['distanceRange']}\n")
        output_file.write(f"\t.line_height = {data['metrics']['lineHeight']}\n")
        output_file.write(f"\t.ascender = {data['metrics']['ascender']}\n")
        output_file.write(f"\t.underline_y = {data['metrics']['underlineY']}\n")
        output_file.write(f"\t.underline_thickness = {data['metrics']['underlineThickness']}\n")
        output_file.write("};\n")
        
        output_file.write("\nglobal const Glyph FONT_OPEN_SANS_GLYPHS =\n{\n")
        for glyph in data['glyphs']:
            output_file.write("\t{")
            output_file.write(f" .unicode = {glyph['unicode']:4}")
            output_file.write(f", .advance = {glyph['advance']:8.6f}")
            if 'planeBounds' in glyph:
                output_file.write(f", .plane_bounds = {{ .left = {glyph['planeBounds']['left']:10.6f}, .bottom = {glyph['planeBounds']['bottom']:10.6f}, .right = {glyph['planeBounds']['right']:10.6f}, .top = {glyph['planeBounds']['top']:10.6f} }}")
            if 'atlasBounds' in glyph:
                output_file.write(f", .atlas_bounds = {{ .left = {glyph['atlasBounds']['left']:6.2f}, .bottom = {glyph['atlasBounds']['bottom']:6.2f}, .right = {glyph['atlasBounds']['right']:6.2f}, .top = {glyph['atlasBounds']['top']:6.2f} }}")
            output_file.write("},\n")
        output_file.write("};\n")
            

    print(f"[info] generated header successfully at '{os.path.abspath(args.out)}'")

