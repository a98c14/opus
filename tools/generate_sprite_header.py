"""
Examples:
python .\generate_sprite_header.py --data=""C:\\Users\\selim\\source\\practice\\opengl\\opengl_14_win\\assets\\textures\\robots.json"" --out=".\\test_out.c"
"""
import json
import os
import argparse

def log_info(message):
    print(f"[info] {message}")

def parse_sprite_name(filename):
    # 'basic/base_robot_4.png' -> 'BASE_ROBOT_4'
    return filename.split('/')[-1].split('.')[0].upper()

def parse_animation_name(filename):
    # 'basic/base_robot_4.png' -> 'BASE_ROBOT'
    return "_".join(parse_sprite_name(filename).split('_')[:-1]).upper()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Opus Sprite Header Generator")
    parser.add_argument("--data", type=str, help="Path to the texturepacker output json", required=True)
    parser.add_argument("--out", type=str, help="Output path", required=True)
    args = parser.parse_args()

    with open(args.data, 'r') as data_file:
        data = json.load(data_file)

    if os.path.exists(args.out):
        os.remove(args.out)

    with open(args.out, 'w') as output_file:        
        # parse metadata
        texture_name, _ = data['meta']['image'].split('.')
        texture_name = texture_name.upper()
        w, h = data['meta']['size']['w'], data['meta']['size']['h']
        
        # parse animation
        animation_prefix = f"ANIMATION_{texture_name}"
        animations = {}
        for frame in data['frames']:
            animation_name = parse_animation_name(frame['filename'])
            animations[animation_name] = animations.get(animation_name, 0) + 1

        # parse sprites
        sprites = []
        sprite_prefix = f"SPRITE_{texture_name}"
        for frame in data['frames']:
            sprite_name = parse_sprite_name(frame['filename'])
            sprites.append(sprite_name)
            
        log_info(f"texture_name: {texture_name}, w: {w}, h: {h}")
        log_info(f"found {len(animations)} animation{'s' if len(animations) > 1 else ''}, {len(sprites)} sprite{'s' if len(sprites) > 1 else ''}")

        # write header
        output_file.writelines(["/**\n", " * IMPORTANT:\n", " * THIS FILE IS AUTO GENERATED\n", " * DO NOT EDIT THIS FILE BY HAND\n", "*/\n"])
        output_file.write("#pragma once\n\n")
        output_file.write("#include <core/defines.h>\n")
        output_file.write("#include <core/math.h>\n")
        output_file.write("#include <gfx/sprite.h>\n")
        output_file.write("#include <engine/text.h>\n")
        
        output_file.write("\ntypedef enum\n{\n")
        output_file.write("\tANIMATION_UNDEFINED = 0,\n")
        for animation in animations.keys():
            output_file.write(f"\t{animation_prefix}_{animation},\n")
        output_file.write("\tANIMATION_COUNT\n")
        output_file.write("} ANIMATION_INDEX;\n")
        
        output_file.write("\ntypedef enum\n{\n")
        output_file.write("\tSPRITE_UNDEFINED = 0,\n")
        for sprite in sprites:
            output_file.write(f"\t{sprite_prefix}_{sprite},\n")
        output_file.write("\tSPRITE_COUNT\n")
        output_file.write("} SPRITE_INDEX;\n")

    print(f"[info] generated header successfully at '{os.path.abspath(args.out)}'")
    
